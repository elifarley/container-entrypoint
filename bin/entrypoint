#!/bin/sh
CMD_BASE="$(readlink -f "$0")" || CMD_BASE="$0"; CMD_BASE="$(dirname "$CMD_BASE")"
set -e

test "$DEBUG" && set -x

_home="$(eval echo ~"$_USER")"; test -e "$_home" || _home="$HOME"
export _home

_INCLUDES='env-vars main'
for item in $_INCLUDES; do . "$CMD_BASE/../lib/$item.sh"; done

test -f "$_home"/image-build.log && echo "$_home/image-build.log:" && cat "$_home"/image-build.log && echo
test -f "$_home"/build-info.txt && echo "$_home/build-info.txt:" && cat "$_home"/build-info.txt && echo

test "$BUILD_MONIKER_XXX_DISABLED" && {
  echo "Hostname: changing from '$(cat /etc/hostname)' to '$BUILD_MONIKER'..."
  hostname "$BUILD_MONIKER" && echo "$BUILD_MONIKER" > /etc/hostname || \
    echo "Unable to change hostname."
}

SSH_CONFIG_VOLUME="${SSH_CONFIG_VOLUME:-/mnt-ssh-config}"

test -d "$_home"/.ssh || mkdir "$_home"/.ssh
# Fix permissions, if writable
test ! -w "$_home"/.ssh && echo "WARNING: '$_home/.ssh' is not writeable" || {
  dir_not_empty "$SSH_CONFIG_VOLUME" && {
    echo "Copying SSH files: '$SSH_CONFIG_VOLUME' -> '$_home/.ssh'..."
    ls -lhFa "$_home"/.ssh && touch "$_home"/.ssh/environment && \
    cp -av "$SSH_CONFIG_VOLUME"/* "$_home"/.ssh && \
    ls -lhFa "$_home"/.ssh || return
  }
  chown -R $_USER:$_USER "$_home"/.ssh && chmod -R 600 "$_home"/.ssh && chmod 700 "$_home"/.ssh
}

_file="$_home"/.ssh/authorized_keys
test ! -f "$_file" && echo "WARNING: No SSH authorized_keys found at '$_file'" || {
  printf "\n$_file:\n"; cat "$_file"; echo
}

_file="$_home"/.ssh/known_hosts
test -e "$_file" && printf "\n$_file:\n"; cat "$_file" && printf '\n\n'

setup_env_vars

# Copy default config from cache
dir_not_empty /etc/ssh || {
  test -d /etc/ssh && \
  echo "/etc/ssh is empty." && \
  dir_not_empty /etc/ssh.cache && cp -av /etc/ssh.cache/* /etc/ssh/
}

# Generate Host keys, if required
dir_not_empty /etc/ssh/ssh_host_* || {
  which ssh-keygen >/dev/null 2>&1 && ssh-keygen -A
}

# Allow running SSHD as non-root user
test root != "$_USER" && test -d /etc/ssh && \
  chown -R $_USER:$_USER /etc/ssh && \
  test ! -d /var/run/sshd && \
    mkdir -p /var/run/sshd && chmod 0755 /var/run/sshd

test "$(id -un)" = "$_USER" && sudo='' || {
  sudo="$(psudo "$_USER")" || return
  ln() { eval $sudo ln "$@"; }
}
export sudo

test "$CEP_LOG_FILES" && linklogfiles "$_USER" "$CEP_LOG_FILES"; unset ln

# MNT_DIR is used by child Docker files
MNT_DIR="${MNT_DIR:-/data}"
if test -e "$MNT_DIR"; then
  mnt_dir_uid=$(stat -c "%u" "$MNT_DIR")
  test $mnt_dir_uid -ne $(id -u "$_USER") && {
    if getent >/dev/null passwd $mnt_dir_uid; then
      echo "$MNT_DIR:"; ls -lhFa "$MNT_DIR"
      echo "Data dir '$MNT_DIR' is owned by an existing user ($(getent passwd $mnt_dir_uid)). Let's change its owner to '$_USER'..."
      chown "$_USER" "$MNT_DIR" || return
    else
      echo "Changing UID of '$_USER' from '$(id -u "$_USER")' to '$mnt_dir_uid' so that it matches that of data dir '$MNT_DIR'..."
      usermod -u $mnt_dir_uid "$_USER" || return
    fi
  }
else
  echo "Creating data dir '$MNT_DIR'..."
  mkdir "$MNT_DIR" && chown "$_USER:$_USER" "$MNT_DIR"
fi

# ----------------------------- Docker -----------------------------

# If UID of docker.sock is not the same...
test -S /var/run/docker.sock && test $(id -u "$_USER") != $(stat -c "%u" /var/run/docker.sock) && {
  docker_gid=$(stat -c "%g" /var/run/docker.sock)
  getent group "$docker_gid" || groupadd -g "$docker_gid" docker
  test $docker_gid -ne $(id -g "$_USER") && \
    echo "Changing GID of '$_USER' from '$(id -g "$_USER")' to '$docker_gid' so that it matches that of '/var/run/docker.sock'..." && \
    usermod -g "$docker_gid" $_USER
}

test -r "$_home"/.ssh/docker-config.json && {
  mkdir -p "$_home"/.docker
  test -f "$_home"/.docker/config.json || {
    ln -sv ../.ssh/docker-config.json "$_home"/.docker/config.json || \
    ls -Falk "$_home"/.docker
  }
}

test -d /mnt-lib-repo && test -S /var/run/docker.sock && which docker 1>/dev/null 2>/dev/null && {
  ldd_fix docker /mnt-lib-repo || return
}

# ----------------------------- /Docker -----------------------------

test -x /usr/local/bin/keytool-import-certs && dir_not_empty "$SSH_CONFIG_VOLUME"/certs && \
  /usr/local/bin/keytool-import-certs --force

test -x "$_home"/app-before-start.sh && {
  echo "[$(id -un)] About to run: $_home/app-before-start.sh"
  "$_home"/app-before-start.sh || return
}

id $_USER

test $# -eq 0 -o "$1" = '--' && {
  test "$1" = '--' && shift
  test -x "$_home"/app.sh && set -- "$_home"/app.sh "$@"
}

printf "\nexec $sudo $*
---------------------------------\n
"
exec $sudo "$@"
